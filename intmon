#!/usr/bin/python
import time
import sys
import signal
import datetime
import getopt


def signal_handler(sig, frame):
        sys.exit(0)

def usage(program):
    print("\nHELP\n---------\nThis Program will print rate of Interrupts per device\n\n")
    print("\nUsage :  {} -i [--interval] -t [--threshold] ".format(program))
    print("\n\n   Interval: Interval to print output \n   Threshold : Print only if rate is above this value")
 
    


signal.signal(signal.SIGINT, signal_handler)


### Function to fetch interrupts and return Highest for Each CPU
def ex():
      
      with open("/proc/interrupts") as f:
          lines = f.readlines()
      Interrupt={}
      CPUs=(str(lines[0].split()).lstrip()).split()
      count=0
      for elements in lines:
         if count !=  0 :
              mess=elements.split()
              mlen=len(mess)
              message=mess[mlen-1]
              if message == "interrupts":
                    message=mess[mlen-2] +"  " +  mess[mlen-1]
              largest=0
              for m in range(1,mlen):
                 if largest < mess[m] and unicode(mess[m]).isnumeric():
                     largest=mess[m]
              CPU="CPU"+str(m-1)
              if largest != "0": 
                    Interrupt[(message,CPU)]=largest 
         count=count+1
      return Interrupt    



##  Main starts here 


##Input Validation 

if len(sys.argv) < 2:
   usage(sys.argv[0])
   sys.exit(2)
 
 
## Default Values
Value=0
Interval=1


## Get User Input

try: 
   
   opts, args = getopt.getopt(sys.argv[1:], "hi:t:", ["help", "interval=", "threshold="]) 


   for o, a in opts:
        if o in ("-h", "--help"):
            usage(sys.argv[0])
            sys.exit()
        elif o in ('-i', "--interval"):
            Interval = int(a)
        elif o in ('-t', "--threshold"):
            Value = int(a)
        else:
            assert False, "unhandled option"
            usage(sys.argv[0])



except (getopt.GetoptError,ValueError), e:
     print("\n\nPlease verify Arguments")
     usage(sys.argv[0])
     sys.exit(2)

## Print output in indefinite Loop and print rate of Interrupts per CPU based on inputs specified. 

while True:
  Time1=ex()
  time.sleep(Interval)
  Time2=ex()
  print("\n---------\n\t Date/Time\t  \t Cpu \t Device \t Inerrupts/ %s second" % str(Interval))
  for elements,y in Time2.items():
    if elements in Time1:
          c=int(y)-int(Time1[elements])
          if c >= Value:
             time1=str(datetime.datetime.now())
             print("{} \t {} \t {} \t \t {}".format(time1,elements[1],elements[0],c))

